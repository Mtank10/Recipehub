// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(uuid())
  name         String
  email        String           @unique
  phone        String?
  avatar       String?
  provider     ProviderType
  providerId   String           @unique
  country      String?
  state        String?
  city         String?
  isOnboardingComplete Boolean  @default(false)
  following    UserFollow[]     @relation("Following")
  followers    UserFollow[]     @relation("Followers")
  likedRecipes RecipeLike[]
  recipes      Recipe[]
  comments     Comment[]
  bookmarks    Bookmark[]
  ratings      Rating[]
  userAnalytics UserAnalytics?
  mealPlans    MealPlan[]
  shoppingLists ShoppingList[]
  contentReports ContentReport[] @relation("ReporterContentReports")
  preferences  UserPreferences?
  culturalPreference CulturalPreference?
  locations    Location[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  RecipeView RecipeView[]

  ContentReport ContentReport[] @relation("ModeratorContentReports")
}

model CulturalPreference {
  id                    String        @id @default(uuid())
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String        @unique
  religion              Religion?
  dietTypes             DietType[]
  preferredCuisines     CuisineType[]
  spiceLevel            SpiceLevel    @default(MEDIUM)
  avoidIngredients      String[]
  preferredIngredients  String[]
  culturalRestrictions  String[]
  festivalPreferences   String[]
  regionalPreferences   String[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model Location {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  latitude  Float?
  longitude Float?
  country   String
  state     String?
  city      String?
  pincode   String?
  address   String?
  isDefault Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFollow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Recipe {
  id           String       @id @default(uuid())
  title        String
  description  String
  image        String?
  tags         String[]     // e.g., ["Vegan", "Italian"]
  cookingTime  Int          // Time in minutes
  steps        String[]     // Step-by-step instructions
  ingredients  Ingredient[]
  authorId     String
  author       User         @relation(fields: [authorId], references: [id])
  likes        RecipeLike[]
  likesCount   Int          @default(0)
  category     String
  comments     Comment[]
  bookmark     Bookmark[]
  ratings      Rating[]
  recipeViews  RecipeView[]
  mealPlanItems MealPlanItem[]
  culturalTag  RecipeCulturalTag?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model RecipeCulturalTag {
  id                   String        @id @default(uuid())
  recipe               Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId             String        @unique
  cuisineType          CuisineType
  dietTypes            DietType[]
  spiceLevel           SpiceLevel    @default(MEDIUM)
  religion             Religion[]
  region               String?
  festival             String?
  culturalSignificance String?
  createdAt            DateTime      @default(now())
}

model Ingredient {
  id       String   @id @default(uuid())
  name     String
  quantity String   // Example: "2 cups"
  recipeId String
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
}

model Rating {
  id        String   @id @default(uuid())
  rating    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([recipeId])
  @@unique([userId, recipeId]) // Prevent duplicate ratings from same user
}

model RecipeLike {
  id       String   @id @default(uuid())
  userId   String
  recipeId String
  user     User     @relation(fields: [userId], references: [id])
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  recipeId  String
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}

// Enums for cultural preferences
enum Religion {
  HINDU
  MUSLIM
  CHRISTIAN
  SIKH
  BUDDHIST
  JAIN
  JEWISH
  OTHER
  NONE
}

enum DietType {
  VEGETARIAN
  NON_VEGETARIAN
  VEGAN
  JAIN_VEGETARIAN
  HALAL
  KOSHER
  EGGETARIAN
}

enum CuisineType {
  NORTH_INDIAN
  SOUTH_INDIAN
  GUJARATI
  PUNJABI
  BENGALI
  MAHARASHTRIAN
  RAJASTHANI
  KERALA
  TAMIL
  ANDHRA
  KASHMIRI
  ASSAMESE
  CHINESE
  ITALIAN
  MEXICAN
  THAI
  JAPANESE
  CONTINENTAL
  MIDDLE_EASTERN
  MEDITERRANEAN
}

enum SpiceLevel {
  MILD
  MEDIUM
  SPICY
  VERY_SPICY
}

enum ProviderType {
  GOOGLE
  FACEBOOK
}

// Analytics Models
model UserAnalytics {
  id                  String   @id @default(uuid())
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @unique
  recipesCreated      Int      @default(0)
  recipesLiked        Int      @default(0)
  recipesBookmarked   Int      @default(0)
  followersCount      Int      @default(0)
  followingCount      Int      @default(0)
  totalRecipeViews    Int      @default(0)
  avgRecipeRating     Float    @default(0)
  lastActive          DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model RecipeView {
  id         String   @id @default(uuid())
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  recipeId   String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  ipAddress  String?
  userAgent  String?
  viewedAt   DateTime @default(now())
}

// Meal Planning Models
model MealPlan {
  id             String         @id @default(uuid())
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  name           String
  weekStartDate  DateTime
  isActive       Boolean        @default(true)
  items          MealPlanItem[]
  shoppingLists  ShoppingList[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MealPlanItem {
  id         String   @id @default(uuid())
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  recipeId   String
  dayOfWeek  Int
  mealType   MealType
  servings   Int      @default(1)
  notes      String?
  createdAt  DateTime @default(now())
}

enum MealType {
  breakfast
  lunch
  dinner
  snack
}

// Shopping List Models
model ShoppingList {
  id          String             @id @default(uuid())
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  mealPlan    MealPlan?          @relation(fields: [mealPlanId], references: [id])
  mealPlanId  String?
  name        String
  isCompleted Boolean            @default(false)
  items       ShoppingListItem[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model ShoppingListItem {
  id             String       @id @default(uuid())
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  shoppingListId String
  ingredientName String
  quantity       String
  unit           String?
  category       String       @default("other")
  isPurchased    Boolean      @default(false)
  notes          String?
  createdAt      DateTime     @default(now())
}

// Content Moderation Models
model ContentReport {
  id             String       @id @default(uuid())
  reporter       User         @relation("ReporterContentReports", fields: [reporterId], references: [id])
  reporterId     String
  contentType    ContentType
  contentId      String
  reason         String
  description    String?
  status         ReportStatus @default(pending)
  moderator      User?        @relation("ModeratorContentReports", fields: [moderatorId], references: [id])
  moderatorId    String?
  moderatorNotes String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum ContentType {
  recipe
  comment
  user
}

enum ReportStatus {
  pending
  reviewed
  resolved
  dismissed
}

// Platform Analytics Model
model PlatformAnalytics {
  id            String   @id @default(uuid())
  date          DateTime @unique
  totalUsers    Int      @default(0)
  newUsers      Int      @default(0)
  activeUsers   Int      @default(0)
  totalRecipes  Int      @default(0)
  newRecipes    Int      @default(0)
  totalViews    Int      @default(0)
  totalLikes    Int      @default(0)
  totalComments Int      @default(0)
  createdAt     DateTime @default(now())
}

// User Preferences Model
model UserPreferences {
  id                  String   @id @default(uuid())
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @unique
  dietaryRestrictions String[]
  favoriteCuisines    String[]
  cookingSkillLevel   CookingSkillLevel @default(beginner)
  preferredMealTypes  String[]
  maxCookingTime      Int      @default(60)
  notificationsEnabled Boolean  @default(true)
  emailNotifications  Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum CookingSkillLevel {
  beginner
  intermediate
  advanced
}